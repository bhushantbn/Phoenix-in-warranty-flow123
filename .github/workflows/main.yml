name: Postman Collection Workflow

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'QA'
        type: choice
        options:
          - QA
          - UAT
          - PROD
  schedule:
    - cron: "30 02 * * 1-5" # 8 AM IST (Monday-Friday)
    - cron: "00 14 * * *"   # 7:30 PM IST (Daily)

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: "20"
  NEWMAN_VERSION: "latest"
  HTMLEXTRA_VERSION: "latest"

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      report_time: ${{ steps.timestamp.outputs.time }}
      test_status: ${{ steps.newman.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install newman and reporters
        run: |
          npm install -g newman@${{ env.NEWMAN_VERSION }}
          npm install -g newman-reporter-htmlextra@${{ env.HTMLEXTRA_VERSION }}
          npm install -g newman-reporter-json

      - name: Create timestamp
        id: timestamp
        run: |
          echo "time=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "readable_time=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=QA" >> $GITHUB_OUTPUT
          fi

      - name: Validate required files
        run: |
          if [ ! -f "Inwarranty-flow Collection.postman_collection.json" ]; then
            echo "Error: Postman collection file not found"
            exit 1
          fi
          if [ ! -f "${{ steps.env.outputs.environment }}.postman_environment.json" ]; then
            echo "Error: Environment file not found"
            exit 1
          fi
          if [ ! -f "testdata.csv" ]; then
            echo "Warning: Test data file not found"
          fi

      - name: Run Postman Collection
        id: newman
        continue-on-error: true
        run: |
          mkdir -p newman/${{ steps.timestamp.outputs.time }}
          
          # Build newman command
          NEWMAN_CMD="newman run 'Inwarranty-flow Collection.postman_collection.json' \
            -e '${{ steps.env.outputs.environment }}.postman_environment.json' \
            -r cli,htmlextra,json \
            --reporter-htmlextra-export ./newman/${{ steps.timestamp.outputs.time }}/index.html \
            --reporter-json-export ./newman/${{ steps.timestamp.outputs.time }}/results.json \
            --reporter-htmlextra-title 'API Test Report - ${{ steps.env.outputs.environment }}' \
            --reporter-htmlextra-logs \
            --reporter-htmlextra-showOnlyFails \
            --color on \
            --timeout-request 30000 \
            --timeout-script 60000"
          
          # Add test data if file exists
          if [ -f "testdata.csv" ]; then
            NEWMAN_CMD="$NEWMAN_CMD -d testdata.csv"
          fi
          
          # Execute newman command
          eval $NEWMAN_CMD

      - name: Parse test results
        id: results
        if: always()
        run: |
          if [ -f "./newman/${{ steps.timestamp.outputs.time }}/results.json" ]; then
            # Extract key metrics from JSON report
            TOTAL_TESTS=$(jq '.run.stats.tests.total' ./newman/${{ steps.timestamp.outputs.time }}/results.json)
            FAILED_TESTS=$(jq '.run.stats.tests.failed' ./newman/${{ steps.timestamp.outputs.time }}/results.json)
            PASSED_TESTS=$(jq '.run.stats.tests.passed' ./newman/${{ steps.timestamp.outputs.time }}/results.json)
            
            echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
            echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
            echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
            echo "success_rate=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))%" >> $GITHUB_OUTPUT
          else
            echo "total_tests=0" >> $GITHUB_OUTPUT
            echo "failed_tests=0" >> $GITHUB_OUTPUT
            echo "passed_tests=0" >> $GITHUB_OUTPUT
            echo "success_rate=0%" >> $GITHUB_OUTPUT
          fi

      - name: Create summary report
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## üß™ API Test Results
          
          **Environment:** ${{ steps.env.outputs.environment }}  
          **Execution Time:** ${{ steps.timestamp.outputs.readable_time }}  
          **Status:** ${{ steps.newman.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          
          ### üìä Test Statistics
          - **Total Tests:** ${{ steps.results.outputs.total_tests }}
          - **Passed:** ${{ steps.results.outputs.passed_tests }}
          - **Failed:** ${{ steps.results.outputs.failed_tests }}
          - **Success Rate:** ${{ steps.results.outputs.success_rate }}
          
          ### üìÑ Reports
          - [üìà Detailed HTML Report](https://pages.github.io/${{ github.repository }})
          EOF

      - name: Prepare Pages artifact
        if: always()
        run: |
          mkdir -p pages
          
          # Create index page with report listing
          cat > pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>API Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
                  .report-list { list-style: none; padding: 0; }
                  .report-item { background: white; border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
                  .status-pass { color: #28a745; }
                  .status-fail { color: #dc3545; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üß™ API Test Reports</h1>
                  <p>Latest test execution results for Inwarranty Flow API</p>
              </div>
          EOF
          
          # Add latest report info
          echo "<div class='report-item'>" >> pages/index.html
          echo "<h3>Latest Report - ${{ steps.timestamp.outputs.readable_time }}</h3>" >> pages/index.html
          echo "<p><strong>Environment:</strong> ${{ steps.env.outputs.environment }}</p>" >> pages/index.html
          echo "<p><strong>Status:</strong> <span class='status-${{ steps.newman.outcome == 'success' && 'pass' || 'fail' }}'>${{ steps.newman.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}</span></p>" >> pages/index.html
          echo "<p><strong>Tests:</strong> ${{ steps.results.outputs.passed_tests }}/${{ steps.results.outputs.total_tests }} passed (${{ steps.results.outputs.success_rate }})</p>" >> pages/index.html
          echo "<a href='reports/${{ steps.timestamp.outputs.time }}/index.html' style='background:#007bff;color:white;padding:8px 16px;text-decoration:none;border-radius:4px;'>üìÑ View Detailed Report</a>" >> pages/index.html
          echo "</div>" >> pages/index.html
          
          # Close HTML
          echo "</body></html>" >> pages/index.html
          
          # Copy all reports to pages
          mkdir -p pages/reports
          if [ -d "newman" ]; then
            cp -r newman/* pages/reports/
          fi

      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

      - name: Create issue on test failure
        if: failure() && (github.event_name == 'schedule' || github.event_name == 'push')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® API Tests Failed - ${{ steps.env.outputs.environment }} Environment`,
              body: `## Test Failure Alert
              
              **Environment:** ${{ steps.env.outputs.environment }}
              **Execution Time:** ${{ steps.timestamp.outputs.readable_time }}
              **Trigger:** ${{ github.event_name }}
              **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ### Test Results
              - **Total Tests:** ${{ steps.results.outputs.total_tests }}
              - **Failed Tests:** ${{ steps.results.outputs.failed_tests }}
              - **Success Rate:** ${{ steps.results.outputs.success_rate }}
              
              ### Next Steps
              1. Review the [detailed test report](${{ github.server_url }}/${{ github.repository }}/pages)
              2. Check the workflow logs for specific error details
              3. Investigate and fix the failing tests
              4. Re-run the workflow to verify fixes
              
              *This issue was automatically created by the API testing workflow.*`,
              labels: ['bug', 'api-test-failure', 'automated']
            });

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'schedule')
    steps:
      - name: Send notification
        run: |
          echo "API Test Summary:"
          echo "Environment: ${{ needs.test.outputs.environment }}"
          echo "Status: ${{ needs.test.outputs.test_status }}"
          echo "Tests: ${{ needs.test.outputs.passed_tests }}/${{ needs.test.outputs.total_tests }} (${{ needs.test.outputs.success_rate }})"
          echo "Report URL: ${{ needs.deploy.outputs.page_url }}"
          # Add your notification logic here (Slack, Teams, Email, etc.)