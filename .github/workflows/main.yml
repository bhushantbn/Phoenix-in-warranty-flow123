name: Postman Collection Workflow

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'QA'
        type: choice
        options:
          - QA
          - UAT
          - PROD
  schedule:
    - cron: "30 02 * * 1-5" # 8 AM IST (Monday-Friday)
    - cron: "00 14 * * *"   # 7:30 PM IST (Daily)

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: "22"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      report_time: ${{ steps.timestamp.outputs.time }}
      test_status: ${{ steps.newman.outcome }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install newman + htmlextra
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra

      - name: Create timestamp
        id: timestamp
        run: |
          echo "time=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "readable_time=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=QA" >> $GITHUB_OUTPUT
          fi

      - name: Validate required files
        run: |
          if [ ! -f "Inwarranty-flow Collection.postman_collection.json" ]; then
            echo "Error: Postman collection file not found"
            exit 1
          fi
          if [ ! -f "${{ steps.env.outputs.environment }}.postman_environment.json" ]; then
            echo "Error: Environment file not found"
            exit 1
          fi

      - name: Run Postman Collection
        id: newman
        continue-on-error: true
        run: |
          mkdir -p newman/${{ steps.timestamp.outputs.time }}
          
          newman run 'Inwarranty-flow Collection.postman_collection.json' \
            -e '${{ steps.env.outputs.environment }}.postman_environment.json' \
            -d testdata.csv \
            -r cli,htmlextra \
            --reporter-htmlextra-export ./newman/${{ steps.timestamp.outputs.time }}/index.html \
            --reporter-htmlextra-title 'API Test Report - ${{ steps.env.outputs.environment }}' \
            --reporter-htmlextra-logs \
            --color on \
            --timeout-request 30000

      - name: Create summary report
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🧪 API Test Results
          
          **Environment:** ${{ steps.env.outputs.environment }}  
          **Execution Time:** ${{ steps.timestamp.outputs.readable_time }}  
          **Status:** ${{ steps.newman.outcome == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### 📄 Reports
          - [📈 Detailed HTML Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})
          EOF

      - name: Prepare Pages artifact
        run: |
          mkdir -p pages
          # Latest report as index.html
          cp newman/${{ steps.timestamp.outputs.time }}/index.html pages/index.html
          # Optional: copy all timestamped reports
          cp -r newman/* pages/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

      - name: Create issue on failure
        if: failure() && (github.event_name == 'schedule' || github.event_name == 'push')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 API Tests Failed - ${{ steps.env.outputs.environment }} Environment`,
              body: `## Test Failure Alert
              
              **Environment:** ${{ steps.env.outputs.environment }}
              **Execution Time:** ${{ steps.timestamp.outputs.readable_time }}
              **Trigger:** ${{ github.event_name }}
              **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ### Next Steps
              1. Review the [test report](${{ github.server_url }}/${{ github.repository }}/pages)
              2. Check workflow logs for error details
              3. Fix failing tests and re-run workflow
              
              *This issue was created automatically by the API testing workflow.*`,
              labels: ['bug', 'api-test-failure', 'automated']
            });

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    steps:
      - name: Send notification
        run: |
          echo "📊 API Test Summary:"
          echo "Environment: ${{ needs.build.outputs.environment }}"
          echo "Status: ${{ needs.build.outputs.test_status }}"
          echo "Time: ${{ needs.build.outputs.report_time }}"
          echo "Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          # Add your notification logic here (Slack, Teams, Email, etc.)